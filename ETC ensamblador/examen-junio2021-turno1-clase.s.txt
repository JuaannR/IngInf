
	.data	
	.align	2
jump_table000:
	.word	B7_4
	.word	B7_5
	.word	B7_6
	.word	B7_8
	.align	2
personas:
	.asciiz		"Tracey Sanders\0\0\0"
	.space	2
	.word	25
	.byte	'F'
	.space	3
	.asciiz		"Teresa Reed\0\0\0\0\0\0"
	.space	2
	.word	30
	.byte	'F'
	.space	3
	.asciiz		"Erin Franklin\0\0\0\0"
	.space	2
	.word	29
	.byte	'F'
	.space	3
	.asciiz		"Bruce Cruz\0\0\0\0\0\0\0"
	.space	2
	.word	65
	.byte	'M'
	.space	3
	.asciiz		"Cody Robinson\0\0\0\0"
	.space	2
	.word	47
	.byte	'M'
	.space	3
	.asciiz		"Christy Sandoval\0"
	.space	2
	.word	22
	.byte	'F'
	.space	3
	.asciiz		"Kelsey Newman\0\0\0\0"
	.space	2
	.word	58
	.byte	'F'
	.space	3
	.asciiz		"Beverly Jackson\0\0"
	.space	2
	.word	77
	.byte	'F'
	.space	3
	.asciiz		"Kristina Grimes\0\0"
	.space	2
	.word	27
	.byte	'F'
	.space	3
	.asciiz		"Ralph Wheeler\0\0\0\0"
	.space	2
	.word	30
	.byte	'M'
	.space	3
        .space 2520     # 90 × 28
	.align	2
num_personas:
	.word	10
	.align	2
main.rects:
	.word	10	# rectangulo1.ancho
	.word	20	# rectangulo1.alto
	.word	30	# rectangulo2.ancho
	.word	15	# rectangulo2.alto
	.word	12	# rectangulo3.ancho
	.word	67	# rectangulo3.alto
	.word	21	# rectangulo4.ancho
	.word	13	# rectangulo4.alto
str000:
	.asciiz		"Nombre: "
str001:
	.asciiz		"Sexo (M/F): "
str002:
	.asciiz		"Edad: "
str003:
	.asciiz		"No se pueden añadir más personas a la lista."
str004:
	.asciiz		"  "
str005:
	.asciiz		"\n\nExamen de ETC de ensamblador\n\n 1. Añadir persona\n 2. Ordenar personas por edad\n 3. Calcular el área de una lista de rectángulos y ajustarlos\n 0. Salir\n\nElige una opción: "
str006:
	.asciiz		"\n\n"
str007:
	.asciiz		"Listado de personas actual:\n"
str008:
	.asciiz		"Listado de personas sin ordenar:\n"
str009:
	.asciiz		"\nListado de personas ordenado por edad:\n"
str010:
	.asciiz		"Rectángulos antes del ajuste:\n"
str011:
	.asciiz		" × "
str012:
	.asciiz		"\nRectángulos después del ajuste:\n"
str013:
	.asciiz		"\nÁrea total: "
str014:
	.asciiz		"¡Adiós!\n"
str015:
	.asciiz		"Opción incorrecta. Pulse cualquier tecla para seguir.\n"

	.text	

leer_cadena:
	addiu	$sp, $sp, -32
	sw	$ra, 28($sp)
	sw	$s1, 24($sp)
	sw	$s0, 20($sp)
	move	$s0, $a1
	move	$s1, $a0
	jal	read_string
	blez	$s0, B0_6
	li	$v0, 0
	li	$v1, 10
B0_2:	addu	$a0, $s1, $v0
	lbu	$t2, 0($a0)
	beq	$t2, $v1, B0_5
	addiu	$v0, $v0, 1
	slt	$t2, $v0, $s0
	beqz	$t2, B0_6
	j	B0_2
B0_5:	sb	$zero, 0($a0)
B0_6:	lw	$s0, 20($sp)
	lw	$s1, 24($sp)
	lw	$ra, 28($sp)
	addiu	$sp, $sp, 32
	jr	$ra

intercambiar_personas:
	addiu	$sp, $sp, -32
	li	$v0, 28
	mul	$t2, $a0, $v0
	la	$v1, personas
	addu	$t2, $v1, $t2
	lw	$a0, 8($t2)
	lw	$a2, 12($t2)
	lw	$a3, 16($t2)
	lw	$t0, 20($t2)
	lw	$t1, 24($t2)
	sw	$t1, 24($sp)
	sw	$t0, 20($sp)
	sw	$a3, 16($sp)
	sw	$a2, 12($sp)
	sw	$a0, 8($sp)
	lw	$a0, 4($t2)
	sw	$a0, 4($sp)
	lw	$a0, 0($t2)
	sw	$a0, 0($sp)
	mul	$v0, $a1, $v0
	addu	$v0, $v1, $v0
	lw	$v1, 12($v0)
	lw	$a0, 16($v0)
	lw	$a1, 20($v0)
	lw	$a2, 24($v0)
	sw	$a2, 24($t2)
	sw	$a1, 20($t2)
	sw	$a0, 16($t2)
	sw	$v1, 12($t2)
	lw	$v1, 8($v0)
	sw	$v1, 8($t2)
	lw	$v1, 4($v0)
	sw	$v1, 4($t2)
	lw	$v1, 0($v0)
	sw	$v1, 0($t2)
	lw	$t2, 12($sp)
	lw	$v1, 16($sp)
	lw	$a0, 20($sp)
	lw	$a1, 24($sp)
	sw	$a1, 24($v0)
	sw	$a0, 20($v0)
	sw	$v1, 16($v0)
	sw	$t2, 12($v0)
	lw	$t2, 8($sp)
	sw	$t2, 8($v0)
	lw	$t2, 4($sp)
	sw	$t2, 4($v0)
	lw	$t2, 0($sp)
	sw	$t2, 0($v0)
	addiu	$sp, $sp, 32
	jr	$ra

# EJERCICIO 2 
ordenar_personas_por_edad:	# No recibe nada por parámetros
        addi	$sp, $sp, -24
        sw	$ra, 0($sp)
        sw	$s0, 4($sp)
        sw	$s1, 8($sp)
        sw	$s2, 12($sp)
        sw	$s3, 16($sp)
	sw	$s4, 20($sp)
	
	la	$t0, num_personas
	lw	$s0, 0($t0)	# num_personas
	#lw 	$s0, num_personas
	li	$s1, 0		# i=0
	la	$s2, personas	# array de personas
for_i:
	bge	$s1, $s0, fin_for_i
	move	$s3, $s1	# m=i
	addi	$s4, $s1, 1	# j=i+1
for_j:
	bge	$s4, $s0, fin_for_j
	mul	$t0, $s4, 28	# j*28 para personas[j]
	add	$t0, $s2, $t0	
	# primera dirección de personas[j]
	#addi	$t0, $t0, 20	# personas[j]+20
	#lw	$t1, 0($t0)
	lw	$t1, 20($t0)	# personas[j].edad
	mul	$t0, $s3, 28	# m*28 para personas[m]
	add	$t0, $s2, $t0
	# primera dirección de personas[m]
	lw	$t2, 20($t0)	# personas[m].edad
	bge	$t1, $t2, aumenta_j
	move	$s3, $s4	# m=j
	
aumenta_j:
	addi	$s4, $s4, 1	# j++
	j	for_j
	
fin_for_j:
	beq	$s3, $s1, aumenta_i
	move	$a0, $s3	# m
	move	$a1, $s1	# i
	jal	intercambiar_personas
	
aumenta_i:
	addi	$s1, $s1, 1	# i++
	j	for_i
	
fin_for_i:
	lw	$ra, 0($sp)
        lw	$s0, 4($sp)
        lw	$s1, 8($sp)
        lw	$s2, 12($sp)
        lw	$s3, 16($sp)
        lw	$s4, 20($sp)        
        addi	$sp, $sp, 24
        jr	$ra

# EJERCICIO 1 
anadir_persona:
        addiu   $sp, $sp, -16
        sw      $ra, 0($sp)
        sw	$s0, 4($sp)
        sw	$s1, 8($sp)
        sw	$s2, 12($sp)
        # ERROR: Al apilar no se suma
        # ERROR: Falta incluir registros
        lw      $s0, num_personas
        # ERROR: El valor de num_personas hay que guardarlo
        # en un registro preservable para no perder su valor
        # al hacer un jal
        bge     $s0, 100, B3_0
        la      $a0, str000
        jal     print_string
        la      $t0, personas
        # ERROR: No se puede utilizar el registro at ya que
        # es utilizado internamente por el sistema.
        li      $t1, 28
        mul     $t2, $s0, $t1
        addu    $s1, $t0, $t2
        move    $a0, $s1
        li      $a1, 18
        jal     leer_cadena
B3_2:   la      $a0, str001
        jal     print_string
        jal     read_character
        move    $s2, $v0
        li      $a0, '\n'
        jal     print_character
        blt     $s2, 'a', B3_3
        addiu   $s2, $s2, -32
B3_3:   beq     $s2, 'M', B3_4
        bne     $s2, 'F', B3_2
B3_4:   sb      $s2, 24($s1)
        la      $a0, str002
        jal     print_string
        jal     read_integer
        sw      $v0, 20($s1)
        addiu   $s0, $s0, 1
        sw      $s0, num_personas
        j       B3_1
B3_0:   la      $a0, str003
        jal     print_string
        
B3_1:   
	lw      $ra, 0($sp)
        lw	$s0, 4($sp)
        lw	$s1, 8($sp)
        lw	$s2, 12($sp)
        addiu   $sp, $sp, 16
        # ERROR: Al desapilar no se resta
        # ERROR: Falta incluir registros
        jr      $ra

strlen:
	addiu	$v0, $a0, -1
B4_1:	lbu	$t2, 1($v0)
	addiu	$v0, $v0, 1
	bnez	$t2, B4_1
	subu	$v0, $v0, $a0
	jr	$ra

listar_personas:
	addiu	$sp, $sp, -56
	sw	$ra, 52($sp)
	sw	$fp, 48($sp)
	sw	$s7, 44($sp)
	sw	$s6, 40($sp)
	sw	$s5, 36($sp)
	sw	$s4, 32($sp)
	sw	$s3, 28($sp)
	sw	$s2, 24($sp)
	sw	$s1, 20($sp)
	sw	$s0, 16($sp)
	lw	$t2, num_personas
	slti	$t2, $t2, 1
	bnez	$t2, B5_6
	li	$s2, 0
	li	$s3, 28
	la	$s5, personas
	li	$s6, 19
	li	$s7, 20
	la	$s0, str004
B5_2:	mul	$fp, $s2, $s3
	addu	$s1, $s5, $fp
	move	$a0, $s1
	jal	print_string
	move	$a0, $s1
	jal	strlen
	slt	$t2, $s6, $v0
	bnez	$t2, B5_5
	subu	$s1, $s7, $v0
B5_4:	li	$a0, 32
	jal	print_character
	addiu	$s1, $s1, -1
	bnez	$s1, B5_4
B5_5:	la	$t2, personas
	addu	$s1, $t2, $fp
	lw	$a0, 20($s1)
	jal	print_integer
	move	$a0, $s0
	jal	print_string
	lb	$a0, 24($s1)
	jal	print_character
	li	$a0, 10
	jal	print_character
	addiu	$s2, $s2, 1
	lw	$t2, num_personas
	slt	$t2, $s2, $t2
	bnez	$t2, B5_2
B5_6:	lw	$s0, 16($sp)
	lw	$s1, 20($sp)
	lw	$s2, 24($sp)
	lw	$s3, 28($sp)
	lw	$s4, 32($sp)
	lw	$s5, 36($sp)
	lw	$s6, 40($sp)
	lw	$s7, 44($sp)
	lw	$fp, 48($sp)
	lw	$ra, 52($sp)
	addiu	$sp, $sp, 56
	jr	$ra

# EJERCICIO 3 
calcula_area_y_ajusta_rectangulos: 	# a0, a1 = array_rectangulos, num_rectangulos
        addi	$sp, $sp, -4
        sw	$ra, 0($sp)
        move	$t0, $a0		# array_rectangulos
        move	$t1, $a1		# num_rectangulos
        li	$t2, 0			# area_total=0
        li	$t3, 0			# i=0
bucle_i:
	bge	$t3, $t1, fin_bucle_i
	lw	$t4, 0($t0)		# array_rectangulos[i].ancho
	lw	$t5, 4($t0)		# array_rectangulos[i].alto
	mul	$t6, $t4, $t5		# area array_rectangulos[i]
	add	$t2, $t2, $t6		# area_total = area_total + area array_rectangulos[i]
	bge	$t4, $t5, incrementa_i
	sw	$t4, 4($t0)		# ancho = alto	
	sw	$t5, 0($t0)		# alto = ancho
	
incrementa_i:
	addi	$t3, $t3, 1		# i++
	addi	$t0, $t0, 8		# Dir. Mem, arr_rect + 8
	j	bucle_i
	
fin_bucle_i:
        move	$v0, $t2		# Devolver el área total
        lw	$ra, 0($sp)
        addi	$sp, $sp, 4
        jr	$ra

	.globl	main
main:
	addiu	$sp, $sp, -128
	sw	$ra, 124($sp)
	sw	$fp, 120($sp)
	sw	$s7, 116($sp)
	sw	$s6, 112($sp)
	sw	$s5, 108($sp)
	sw	$s4, 104($sp)
	sw	$s3, 100($sp)
	sw	$s2, 96($sp)
	sw	$s1, 92($sp)
	sw	$s0, 88($sp)
	jal	clear_screen
	la	$t2, str005
	sw	$t2, 52($sp)
	la	$t2, str006
	sw	$t2, 48($sp)
	la	$t2, str015
	sw	$t2, 44($sp)
	la	$t2, str014
	sw	$t2, 40($sp)
	la	$t2, str007
	sw	$t2, 36($sp)
	la	$t2, str008
	sw	$t2, 32($sp)
	la	$t2, str009
	sw	$t2, 28($sp)
	lw	$t2, main.rects
	sw	$t2, 24($sp)
	la	$t2, str010
	sw	$t2, 20($sp)
	addiu	$fp, $sp, 56
	la	$s0, str011
	li	$s4, 32
	la	$s1, str012
	la	$s2, str013
	j	B7_2
B7_1:	lw	$a0, 44($sp)
	jal	print_string
	jal	read_character
B7_2:	lw	$a0, 52($sp)
	jal	print_string
	jal	read_character
	move	$s3, $v0
	lw	$a0, 48($sp)
	jal	print_string
	sll	$t2, $s3, 24
	sra	$t2, $t2, 24
	addiu	$v0, $t2, -48
	li	$t2, 3
	sltu	$t2, $t2, $v0
	bnez	$t2, B7_1
	sll	$t2, $v0, 2
	lw	$t2, jump_table000($t2)
	jr	$t2
B7_4:	lw	$a0, 40($sp)
	jal	print_string
	li	$a0, 0
	jal	mips_exit
	j	B7_2
B7_5:	jal	anadir_persona
	lw	$a0, 36($sp)
	j	B7_7
B7_6:	lw	$a0, 32($sp)
	jal	print_string
	jal	listar_personas
	jal	ordenar_personas_por_edad
	lw	$a0, 28($sp)
B7_7:	jal	print_string
	jal	listar_personas
	j	B7_2
B7_8:	la	$t2, main.rects
	lw	$v0, 16($t2)
	lw	$v1, 20($t2)
	lw	$a0, 24($t2)
	lw	$a1, 28($t2)
	lw	$a2, 24($sp)
	sw	$a2, 56($sp)
	sw	$a1, 84($sp)
	sw	$a0, 80($sp)
	sw	$v1, 76($sp)
	sw	$v0, 72($sp)
	lw	$v0, 12($t2)
	sw	$v0, 68($sp)
	lw	$v0, 8($t2)
	sw	$v0, 64($sp)
	lw	$t2, 4($t2)
	sw	$t2, 60($sp)
	lw	$a0, 20($sp)
	jal	print_string
	li	$s3, 0
B7_9:	addu	$s6, $fp, $s3
	lw	$a0, 0($s6)
	jal	print_integer
	move	$a0, $s0
	jal	print_string
	lw	$a0, 4($s6)
	jal	print_integer
	li	$a0, 10
	jal	print_character
	addiu	$s3, $s3, 8
	bne	$s3, $s4, B7_9
	move	$a0, $fp
	li	$a1, 4
	jal	calcula_area_y_ajusta_rectangulos
	move	$s3, $v0
	move	$a0, $s1
	jal	print_string
	li	$s6, 0
B7_11:	addu	$s7, $fp, $s6
	lw	$a0, 0($s7)
	jal	print_integer
	la	$a0, str011
	jal	print_string
	lw	$a0, 4($s7)
	jal	print_integer
	li	$a0, 10
	jal	print_character
	addiu	$s6, $s6, 8
	bne	$s6, $s4, B7_11
	move	$a0, $s2
	jal	print_string
	move	$a0, $s3
	jal	print_integer
	j	B7_2

print_integer:
	li	$v0, 1
	syscall	
	jr	$ra

read_integer:
	li	$v0, 5
	syscall	
	jr	$ra

read_string:
	li	$v0, 8
	syscall	
	jr	$ra

print_character:
	li	$v0, 11
	syscall	
	jr	$ra

print_string:
	li	$v0, 4
	syscall	
	jr	$ra

read_character:
	li	$v0, 12
	syscall	
	jr	$ra

clear_screen:
	li	$v0, 39
	syscall	
	jr	$ra

mips_exit:
	li	$v0, 17
	syscall	
	jr	$ra
